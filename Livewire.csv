Front,Back
What is Livewire?,"Full-stack framework for Laravel that makes building dynamic interfaces simple without writing JS"
Installation,"composer require livewire/livewire + @livewireStyles & @livewireScripts in layout"
Component Creation,"php artisan make:livewire ComponentName (creates .php & .blade.php)"
Basic Component,"class Counter extends Component { public $count = 0; public function increment() { $this->count++; } }"
Rendering Components,"<livewire:counter /> or @livewire('counter') in Blade"
Data Binding,"wire:model='property' (Two-way binding for inputs)"
Properties,"public $property; - Automatically made available to frontend"
Actions,"public function method() { } - Called from frontend via wire:click='method'"
Event Emission,"$this->emit('event-name', $data) - Cross-component communication"
Event Listening,"wire:listen='event-name'='methodToCall' - Handle emitted events"
Lifecycle Hooks,"mount(), hydrate(), dehydrate(), updating(), updated()"
Form Handling,"wire:submit.prevent='save' - Form submission without page reload"
Validation,"$this->validate(['field' => 'required|min:6']); - Laravel validation rules"
Error Messages,"@error('field') <span>{{ $message }}</span> @enderror - Display validation errors"
File Uploads,"wire:model='photo' + public $photo; - Automatic file upload handling"
Pagination,"use WithPagination; return view(..., ['posts' => Post::paginate(10)])"
Redirecting,"return redirect()->to('/path'); - After form submission etc."
Flash Messages,"session()->flash('message', 'Saved!'); - Temporary session data"
Nested Components,"<livewire:child-component :param='$value' /> - Parent/child relationships"
Public Methods,"#[On('event')] public function handle() {} - Attribute syntax for event listeners"
Protected/Private,"Methods not marked public aren't callable from frontend"
Computed Properties,"public function getTotalProperty() { return $this->quantity * $this->price; } - Access as $this->total"
Query String,"protected $queryString = ['search']; - Maintain state in URL"
Route Binding,"#[Layout('layouts.app')] - Specify component layout"
Loading States,"wire:loading, wire:loading.class='invisible' - Show/hide during requests"
Polling,"wire:poll.500ms='method' - Auto-refresh component"
Action Modifiers,"wire:click.prevent='save' - Chain like .prevent, .stop, .debounce"
Debouncing Input,"wire:model.debounce.500ms='search' - Delay expensive operations"
Lazy Loading,"wire:model.lazy='field' - Only update on blur"
Deferred Loading,"wire:init - Load component after page load"
JavaScript Hooks,"Livewire.on('event', () => {}) - Intercept Livewire events from JS"
Third-Party JS,"<script> document.addEventListener('livewire:load', function() { // init }); </script>"
Security,"Automatically protected against XSS, SQL injection via Laravel"
Testing,"Livewire::test(Component::class)->assertSet('property', value)"
Full-Page Components,"Return view from render() - Acts like controller"
Inline Components,"Return Blade string from render() - For small components"
Traits,"use WithPagination, WithFileUploads - Reusable functionality"
Custom Directives,"Livewire::directive('foo', fn() => "...") - Extend Livewire"
Dynamic Properties,"#[Computed] - Attribute for dynamic properties in PHP 8.0+"
Synthetic Events,"$this->dispatchBrowserEvent('name', data) - Trigger window events"
Event Listeners,"window.addEventListener('event', (e) => {}) - JS event handling"
Prefetching,"wire:hover.prefetch='method' - Load data on hover"
Offline State,"navigator.onLine - Check connectivity in JS"
Loading Targets,"wire:target='action' - Show loading state for specific actions"
Component Keys,"<livewire:component :key='unique' /> - Force re-render"
Blade Integration,"Full access to all Blade directives (@if, @foreach etc.)"
CSS Isolation,"Automatically scoped to component with wire:key"
Alpine.js Integration,"Perfect companion for client-side interactions"
Performance Tips,"Limit data exposed, use lazy loading, cache expensive operations"
Deployment,"Run php artisan livewire:publish --assets - For production"