Front,Back
What is Git Flow?,"A branching model for Git that defines a strict branching structure for managing larger projects"
Main Branches,"master (production) & develop (integration) - Long-lived branches"
Feature Branches,"Branch from: develop; Merge into: develop; Naming: feature/*"
Release Branches,"Branch from: develop; Merge into: develop & master; Naming: release/*"
Hotfix Branches,"Branch from: master; Merge into: develop & master; Naming: hotfix/*"
Support Branches,"For legacy versions (rarely used); Naming: support/*"
Initialize Git Flow,"git flow init -d (uses default branch naming conventions)"
Start Feature,"git flow feature start FEATURE_NAME"
Finish Feature,"git flow feature finish FEATURE_NAME (merges to develop, deletes branch)"
Publish Feature,"git flow feature publish FEATURE_NAME (push to remote)"
Track Remote Feature,"git flow feature track FEATURE_NAME (pull existing feature)"
Start Release,"git flow release start RELEASE_VERSION"
Finish Release,"git flow release finish RELEASE_VERSION (merges to master & develop, tags version)"
Publish Release,"git flow release publish RELEASE_VERSION (push to remote)"
Start Hotfix,"git flow hotfix start HOTFIX_NAME"
Finish Hotfix,"git flow hotfix finish HOTFIX_NAME (merges to master & develop, tags version)"
Version Tagging,"Automatic version tagging on release/hotfix completion (v1.0.0 format)"
Git Flow Diagram,"Visualization: master <- release <- develop <- features"
Merge Conflicts,"Resolve conflicts during feature/release/hotfix finish"
Rebase vs Merge,"Feature branches should use git merge (preserves history)"
Keeping Develop Stable,"Only merge tested features into develop"
Release Preparation,"Last-minute bug fixes go in release branch (not new features)"
Hotfix Urgency,"Bypasses normal process for critical production fixes"
Git Flow Extensions,"Optional: git-flow-avh (with additional commands)"
Command Cheat Sheet,"start, finish, publish, track, pull, delete, list, diff"
Feature Freeze,"Period where no new features enter release branch"
Release Versioning,"Semantic versioning: MAJOR.MINOR.PATCH"
Production Deployments,"Always deploy from master branch"
Development Environment,"All developers work from develop branch"
Code Review,"All features require pull request before merging"
Continuous Integration,"Automated builds/test on develop branch"
Git Flow Alternatives,"GitHub Flow, GitLab Flow, Trunk-Based Development"
When to Use Git Flow,"For: versioned releases, multiple environments, formal process"
When Not to Use,"For: continuous delivery, small teams, single environment"
Migration to Git Flow,"Start with just master/develop, add other branches gradually"
Branch Cleanup,"Automatically deletes finished branches (by default)"
Hook Scripts,"Custom scripts during start/finish (e.g., run tests)"
Integration Testing,"Done on develop branch before release"
Documentation,"Keep CHANGELOG.md updated with release notes"
Backporting Fixes,"Cherry-pick hotfixes to older release branches"
Feature Flags,"For partially completed features in releases"
Environment Branches,"Some use develop-staging-production branches"
Git Flow GUI,"Tools like Sourcetree, GitKraken support Git Flow"
Legacy Version Support,"Use support/ branches for maintaining old versions"
Release Candidates,"release/v1.0.0-rc1 branches for testing"
Emergency Fixes,"Hotfix branches for critical production issues"
Branch Permissions,"Restrict direct pushes to master/develop"
Code Freeze,"Period where only bug fixes are allowed before release"
Feature Toggles,"Alternative to feature branches for unfinished features"
Git Flow in CI/CD,"Automate testing at each branch level"
Release Checklist,"Test, version bump, docs update, changelog"
Hotfix Process,"1. Branch from master 2. Fix 3. Test 4. Merge to master/develop 5. Tag"
Feature Lifecycle,"1. Start 2. Develop 3. Test 4. PR 5. Merge 6. Finish"
Release Lifecycle,"1. Start 2. Finalize 3. Test 4. Finish 5. Deploy"
Git Flow Benefits,"Clear structure, parallel development, production stability"
Git Flow Drawbacks,"Complexity, merge hell, slower delivery"
Git Flow vs GitHub Flow,"Git Flow: releases; GitHub Flow: continuous delivery"
Scaling Git Flow,"For large teams: add more integration branches"
Git Flow in Tools,"Built-in support in Azure DevOps, Bitbucket etc."