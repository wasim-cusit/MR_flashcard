Front,Back
let/const,"Block-scoped declarations (vs var): let mutable, const immutable after assignment"
Arrow Functions,"() => {} - Shorter syntax, lexical 'this', no arguments object"
Template Literals,"`Hello ${name}` - Multi-line strings, expression interpolation"
Destructuring,"const {prop} = obj / const [first] = array - Unpack values from objects/arrays"
Default Parameters,"function foo(param = 'default') {} - Fallback values for undefined"
Rest Parameters,"function(...args) - Collect remaining arguments as array"
Spread Operator,"[...array], {...obj} - Expand iterables for function args or object merging"
Object Property Shorthand,"{name} instead of {name: name} - Shorter object literals"
Method Definition Shorthand,"{method() {}} - Shorter syntax in object literals"
Computed Property Names,"{[key]: value} - Dynamic property names in object literals"
Classes,"class MyClass { constructor() {} method() {} } - Syntactic sugar over prototypes"
Class Inheritance,"class Child extends Parent { constructor() { super(); } }"
Static Methods,"class MyClass { static method() {} } - Called on class, not instances"
Getters/Setters,"class { get prop() {} set prop(v) {} } - Computed property access"
Modules - import,"import Module from 'module'; import { named } from 'module'"
Modules - export,"export default Module; export const named = 42;"
Promise Basics,"new Promise((resolve, reject) => {}) - Asynchronous operations"
Promise Chaining,".then().catch().finally() - Handle async success/failure"
async/await,"async function f() { await promise; } - Synchronous-style async code"
for...of Loop,"for (const item of iterable) - Iterate over iterables (arrays, strings, etc)"
Iterators,"Symbol.iterator protocol - Make objects iterable with next() method"
Generators,"function* gen() { yield value; } - Pausable functions, lazy evaluation"
Map,"new Map() - Key-value store (keys can be any type), .set(), .get(), .has()"
Set,"new Set() - Unique value collection, .add(), .has(), .size"
WeakMap/WeakSet,"Variants that don't prevent garbage collection of keys"
Symbol,"Symbol('description') - Unique primitive, used for object properties"
Object.assign,"Object.assign(target, ...sources) - Shallow object merge"
Object.is,"Object.is(val1, val2) - Strict equality comparison (+0/-0, NaN)"
Array.includes,"[1,2].includes(2) - Check for value presence (better than indexOf)"
Array.find/findIndex,"[1,2].find(x => x > 1) - Find element by condition"
Array.some/every,"[1,2].some(x => x > 1) - Test if some/every elements pass"
Array.flat/flatMap,"[1,[2]].flat() → [1,2] - Flatten nested arrays"
Object.entries/values,"Object.entries(obj) → [[key,val]] - Convert object to array"
Object.fromEntries,"Object.fromEntries([[key,val]]) → obj - Reverse of Object.entries"
String.includes/startsWith/endsWith,"'str'.includes('s') - String search methods"
String.padStart/padEnd,"'5'.padStart(2,'0') → '05' - String padding"
Exponentiation Operator,"2 ** 3 → 8 - Power operator (replaces Math.pow())"
Optional Chaining,"obj?.prop?.method?.() - Safely access nested properties"
Nullish Coalescing,"value ?? 'default' - Fallback only for null/undefined (not falsy)"
BigInt,"123n - Arbitrary-precision integers (suffix with 'n')"
globalThis,"globalThis - Standard way to access global object across environments"
Dynamic Imports,"const module = await import('path') - Load modules dynamically"
Promise.allSettled,"Waits for all promises to complete (unlike all/race)"
Promise.any,"Resolves when any promise fulfills (vs race which cares about first settlement)"
String.replaceAll,"'aabb'.replaceAll('a','b') → 'bbbb' - Global replace"
Logical Assignment,"a ||= b (a = a || b), a &&= b, a ??= b - Combine logical ops with assignment"
Numeric Separators,"1_000_000 - Underscores in numbers for readability"
Array.at,"[1,2,3].at(-1) → 3 - Relative indexing (supports negative numbers)"
Object.hasOwn,"Object.hasOwn(obj, prop) - Safer alternative to hasOwnProperty"
Error Cause,"new Error('msg', {cause: err}) - Chain errors with causal relationships"
Top-level await,"await at module level (no async wrapper needed)"
Array.findLast/findLastIndex,"Find from end of array (ES2023)"
Hashbang Support,"#!/usr/bin/env node - Valid syntax at top of JS files (ES2023)"
WeakRef,"new WeakRef(obj) - Weak references (don't prevent GC)"
FinalizationRegistry,"Cleanup callbacks when objects are garbage collected"
Private Class Fields,"#privateField - Truly private class members (not just conventionally underscored)"
Static Class Fields,"class { static field = 42; } - Class-level properties"
Static Initialization Blocks,"class { static { /* initialization */ } } - Run code during class setup"
Public Class Fields,"class { field = 42; } - Instance properties without constructor"
Private Methods,"class { #privateMethod() {} } - Truly private methods"
Class Static Blocks,"static { } - Block for static class initialization"
Array Grouping,"Object.groupBy(items, callback) - Group array items (ES2023)"
RegExp Match Indices,"/d flag - Get start/end indices of matches"
Import Attributes,"import json from './file.json' with { type: 'json' } - Metadata for imports"